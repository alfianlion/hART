generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum StaffType {
  INTERN
  RO
}

model Staff {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String
  type     StaffType @default(INTERN)
  leaves   Float?
  GVTStaff GVTStaff?
}

model GVTStaff {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  email   String
  leaves  Float
  staff   Staff  @relation(fields: [staffId], references: [id])
  staffId String @unique @db.ObjectId
}

enum LeaveCategory {
  GOVTECH
  MOM
}

enum LeaveType {
  FULL
  HALF_PM
  HALF_AM
}

enum LeaveStatus {
  APPROVED
  REJECTED
  PENDING
  CANCELLED
}

model Leave {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  staffId          String
  roId             String
  leaveCategory    LeaveCategory
  leaveType        LeaveType
  startDate        DateTime
  endDate          DateTime
  leaveDetails     String?
  leaveStatus      LeaveStatus   @default(PENDING)
  rejectedDetails  String?
  lastModifiedDate DateTime      @updatedAt
}

// model Account {
//   id                String   @id @default(cuid()) @map("_id")
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   token_type        String?
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   scope             String?
//   id_token          String?
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
//   user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid()) @map("_id")
//   userId       String?  @map("user_id")
//   sessionToken String   @unique @map("session_token")
//   accessToken  String?  @map("access_token")
//   expires      DateTime
//   user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
// }

// model VerificationToken {
//   id         String   @id @default(cuid()) @map("_id")
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   User       User?    @relation(fields: [userId], references: [id])
//   userId     String?

//   @@unique([identifier, token])
// }
